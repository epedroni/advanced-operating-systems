--------------------------------------------------------------------------
-- Copyright (c) 2007-2016, ETH Zurich.
-- Copyright (c) 2015-2016, Hewlett Packard Enterprise Development LP.
-- All rights reserved.
--
-- This file is distributed under the terms in the attached LICENSE file.
-- If you do not find this file, copies can be found by writing to:
-- ETH Zurich D-INFK, CAB F.78, Universitaetstr. 6, CH-8092 Zurich.
-- Attn: Systems Group.
--
-- Hakefile for Barrelfish CPU drivers
--
--------------------------------------------------------------------------

--
-- Missing from this new Hakefile is the rule to build kernel debug
-- symbols, since this requires some thinking about naming
-- conventions.  Here is the rule we need:
--
--                Rule ( [ Str "OBJDUMP=objdump",
--                         In SrcTree "src" "/tools/gen-gdbscript.sh",
--                         In SrcTree "src" "/tools/debug.gdb.in",
--                         In BuildTree arch "../sbin/cpu",
--                         Str ">", Out arch "/debug.gdb"
--                        ] )

let
  scheduler = case Config.scheduler of
      Config.RR   -> "schedule_rr.c"
      Config.RBED -> "schedule_rbed.c"
  common_c = [ "gdb_stub.c", 
               "capabilities.c", 
               "cap_delete.c",
               "dispatch.c",
               scheduler, 
               "kcb.c",
               "memset.c", 
               "memmove.c", 
               "monitor.c",
               "paging_generic.c",
               "printf.c",
               "startup.c",
               "stdlib.c",
               "string.c",
               "sys_debug.c",
               "syscall.c",
               "wakeup.c",
               "useraccess.c",
               "coreboot.c" ]
             ++ (if Config.microbenchmarks then ["microbenchmarks.c"] else [])
             ++ (if Config.oneshot_timer then ["timer.c"] else [])
  common_libs = [ "getopt", "mdb_kernel" ]
  boot_c = [ "memset.c", 
             "printf.c",
             "stdlib.c",
             "string.c" ]

  link_cpudriver arg = linkKernel opts name objs libs "cpu"
    where
      opts = kernelOptions $ head $ Args.architectures arg
      suffix = if "cpu" == Args.target arg
             then ""
             else "_" ++ (Args.target arg)
      name = "cpu" ++ suffix
      objs = [ objectFilePath opts f
             | f <- (Args.assemblyFiles arg) ++ (Args.cFiles arg) ++ common_c ]
      libs = (Args.addLibraries arg) ++ common_libs

  link_bootdriver arg = linkKernel opts name objs libs "boot"
    where
      opts = kernelOptions $ head $ Args.architectures arg
      name = "boot_" ++ Args.target arg
      objs = [ objectFilePath opts f
             | f <- (Args.assemblyFiles arg) ++(Args.cFiles arg) ++ boot_c ]
      libs = (Args.addLibraries arg) ++ common_libs

  link_aos_m0 arg = linkKernel opts name objs libs "cpu"
    where
      opts = kernelOptions $ head $ Args.architectures arg
      name = "cpu_" ++ Args.target arg
      objs = [ objectFilePath opts f
             | f <- (Args.assemblyFiles arg) ++ (Args.cFiles arg) ++
                    boot_c ]
      libs = (Args.addLibraries arg) ++ common_libs

  cpudrivers arglist =
    let
      cafiles = Data.List.nub $ concat [ [ [ arch, cfile ]
                                         | arch <- Args.architectures arg,
                                           cfile <- common_c ++ (Args.cFiles arg) ]
                                       | arg <- arglist ]
      safiles = Data.List.nub $ concat [ [ [ arch, sfile ]
                                         | arch <- Args.architectures arg,
                                           sfile <- Args.assemblyFiles arg ]
                                       | arg <- arglist ]
      mafiles = Data.List.nub $ concat [ [ [ arch, mfile ]
                                         | arch <- Args.architectures arg,
                                           mfile <- Args.mackerelDevices arg ]
                                       | arg <- arglist ]
    in
     ( [ compileCFile (kernelOptions a) f | [a,f] <- cafiles ]
       ++
       [ assembleSFile (kernelOptions a) f | [a,f] <- safiles ]
       ++
       [ mackerelDependencies (kernelOptions a) f [ c | [a,c] <- cafiles]
       | [a,f] <- mafiles ]
       ++
       [ (case Args.driverType arg of
             "boot" -> link_bootdriver arg
             "aos" -> link_aos_m0 arg
             _ ->  link_cpudriver arg) | arg <- arglist ]
     )

  --
  -- CPU and boot drivers to build
  --

  in cpudrivers [

  --
  -- Common boot driver for Versatile Express boards
  --
  bootDriver {
     target = "ve",
     architectures = [ "armv7" ],
     assemblyFiles = [ "arch/armv7/boot.S" ],
     cFiles = [
                "arch/armv7/boot_driver.c",
                "arch/armv7/paging_init.c",
                "arch/armv7/plat_vexpress_consts.c",
                "arch/arm/kputchar.c",
                "arch/arm/misc.c", 
                "arch/arm/multiboot.c",
                "arch/arm/pl011.c"
                ],
     mackerelDevices = [ "arm",
                         "cpuid_arm",
                         "pl011_uart"
                       ],
     addLibraries = [ "elf" ]
     },
  --
  -- Versatile Express Cortex-A15 ARMv7-A, e.g. GEM5 or qemu
  --
  cpuDriver {
    target = "a15ve",
    architectures = [ "armv7" ],
    assemblyFiles = [ "arch/armv7/exceptions.S",
                      "arch/armv7/set_stack_for_mode.S",
                      "arch/armv7/bsp_start.S",
                      "arch/armv7/cpu_start.S"
                    ],
    cFiles = [ 
               "arch/armv7/a15_gt.c",
               "arch/armv7/boot_protocol.c",
               "arch/armv7/init.c",
               "arch/armv7/kludges.c",
               "arch/armv7/paging.c",
               "arch/armv7/plat_a15mpcore.c",
               "arch/armv7/plat_id.c",
               "arch/armv7/plat_priv_cbar.c",
               "arch/armv7/plat_vexpress.c",
               "arch/armv7/plat_vexpress_consts.c",
               "arch/armv7/startup_arch.c",
               "arch/armv7/syscall.c",
               "arch/arm/debug.c",
               "arch/arm/dispatch.c",
               "arch/arm/exec.c", 
               "arch/arm/exn.c", 
               "arch/arm/gic.c",
               "arch/arm/irq.c", 
               "arch/arm/kputchar.c",
               "arch/arm/misc.c", 
               "arch/arm/multiboot.c",
               "arch/arm/pl011.c"
               ],
    mackerelDevices = [ "arm", 
                        "cpuid_arm",
                        "pl011_uart", 
                        "pl130_gic" ],
    addLibraries = [ "elf" ]
    },
  --
  -- Common boot driver for Versatile Express boards
  --
  bootDriver {
     target = "ve",
     architectures = [ "armv7" ],
     assemblyFiles = [ "arch/armv7/boot.S" ],
     cFiles = [
                "arch/armv7/boot_driver.c",
                "arch/armv7/paging_init.c",
                "arch/armv7/plat_basic_boot.c",
                "arch/armv7/plat_vexpress_consts.c",
                "arch/arm/kputchar.c",
                "arch/arm/misc.c", 
                "arch/arm/multiboot.c",
                "arch/arm/pl011.c"
                ],
     mackerelDevices = [ "arm",
                         "cpuid_arm",
                         "pl011_uart"
                       ],
     addLibraries = [ ]
     },
  --
  -- Versatile Express Cortex-A9 ARMv7-A, e.g. ARM Fixed Virtual Platform
  --
  cpuDriver {
     target = "a9ve",
     architectures = [ "armv7" ],
     assemblyFiles = [ "arch/armv7/exceptions.S",
                       "arch/armv7/set_stack_for_mode.S",
                       "arch/armv7/bsp_start.S",
                       "arch/armv7/cpu_start.S"
                     ],
     cFiles = [
                "arch/armv7/a9_gt.c",
                "arch/armv7/a9_scu.c",
                "arch/armv7/boot_protocol.c",
                "arch/armv7/init.c",
                "arch/armv7/kludges.c",
                "arch/armv7/paging.c",
                "arch/armv7/plat_a9mpcore.c",
                "arch/armv7/plat_id.c",
                "arch/armv7/plat_priv_cbar.c",
                "arch/armv7/plat_vexpress.c",
                "arch/armv7/plat_vexpress_consts.c",
                "arch/armv7/startup_arch.c",
                "arch/armv7/syscall.c",
                "arch/arm/debug.c",
                "arch/arm/dispatch.c",
                "arch/arm/exec.c", 
                "arch/arm/exn.c", 
                "arch/arm/gic.c",
                "arch/arm/irq.c",
                "arch/arm/kputchar.c",
                "arch/arm/misc.c", 
                "arch/arm/multiboot.c",
                "arch/arm/pl011.c"
                ],
     mackerelDevices = [ "arm",
                         "cpuid_arm",
                         "pl011_uart", 
                         "pl130_gic",
                         "cortex_a9_gt",
                         "cortex_a9_scu"
                       ],
     addLibraries = [ "elf" ]
     },
  --
  -- TI OMAP44xx-series dual-core Cortex-A9 SoC
  --
  bootDriver {
     target = "omap44xx",
     architectures = [ "armv7" ],
     assemblyFiles = [ "arch/armv7/boot.S" ],
     cFiles = [
                "arch/armv7/boot_driver.c",
                "arch/armv7/paging_init.c",
                "arch/armv7/plat_omap44xx_boot.c",
                "arch/armv7/plat_omap44xx_consts.c",
                "arch/arm/kputchar.c",
                "arch/arm/misc.c", 
                "arch/arm/multiboot.c",
                "arch/arm/omap_uart.c"
                ],
     mackerelDevices = [ "arm",
                         "cpuid_arm",
                         "omap/omap44xx_cortexa9_wugen",
                         "omap/omap44xx_uart3"
                       ],
     addLibraries = [ ]
     },
  cpuDriver {
     target = "omap44xx",
     architectures = [ "armv7" ],
     assemblyFiles = [ "arch/armv7/exceptions.S",
                       "arch/armv7/set_stack_for_mode.S",
                       "arch/armv7/bsp_start.S",
                       "arch/armv7/cpu_start.S"
                     ],
     cFiles = [ 
                "arch/armv7/a9_gt.c",
                "arch/armv7/a9_scu.c",
                "arch/armv7/boot_protocol.c",
                "arch/armv7/kludges.c",
                "arch/armv7/init.c",
                "arch/armv7/paging.c",
                "arch/armv7/plat_a9mpcore.c",
                "arch/armv7/plat_id.c",
                "arch/armv7/plat_omap44xx.c",
                "arch/armv7/plat_omap44xx_consts.c",
                "arch/armv7/plat_priv_cbar.c",
                "arch/armv7/startup_arch.c",
                "arch/armv7/syscall.c",
                "arch/arm/debug.c",
                "arch/arm/dispatch.c",
                "arch/arm/exec.c", 
                "arch/arm/exn.c", 
                "arch/arm/gic.c",
                "arch/arm/irq.c",
                "arch/arm/kputchar.c",
                "arch/arm/misc.c", 
                "arch/arm/multiboot.c",
                "arch/arm/omap_uart.c"
                ],
     mackerelDevices = [ "arm",
                         "cpuid_arm",
                         "pl130_gic",
                         "cortex_a9_pit",
                         "cortex_a9_gt",
                         "cortex_a9_scu",
                         "omap/omap44xx_uart3",
                         "omap/omap44xx_id",
                         "omap/omap44xx_emif",
                         "omap/omap44xx_sysctrl_padconf_core",
                         "omap/omap44xx_sysctrl_padconf_wkup",
                         "omap/omap44xx_hsusbhost",
                         "omap/omap44xx_usbtllhs_config",
                         "omap/omap44xx_scrm",
                         "omap/omap44xx_ehci",
                         "omap/omap44xx_ckgen_prm",
                         "omap/omap44xx_ckgen_cm1",
                         "omap/omap44xx_l4per_cm2",
                         "omap/omap44xx_l3init_cm2",
                         "omap/omap44xx_spinlock",
                         "omap/omap44xx_gpio"
                         ],
     addLibraries = [ "elf" ]
     },
  cpuDriver {
     target = "aos_m0",
     driverType = "aos",
     architectures = [ "armv7" ],
     assemblyFiles = [ "arch/armv7/cpu_start.S",
                       "arch/armv7/aos/exceptions.S" ],
     cFiles = [ 
                "arch/armv7/aos/init.c",
                "arch/armv7/aos/paging.c",
                "arch/armv7/aos/plat_omap44xx.c",
                "arch/arm/kputchar.c",
                "arch/arm/misc.c"
                ],
     mackerelDevices = [ "arm",
                         "cpuid_arm",
                         "omap/omap44xx_uart3",
                         "omap/omap44xx_gpio",
                         "omap/omap44xx_sysctrl_padconf_core"
                         ],
     addLibraries = [ "elf" ]
     }
  ]
